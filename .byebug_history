continue
event
next
continue
exception
next
continue
next
message
next
continue
next
@conversation.messages
@conversation
next
continue
params
exception
next
continue
!open? && !max_participants_reached?
!open? and !max_participants_reached?
open? and !max_participants_reached?
max_participants_reached?
open?
continue
next
continue
next
@events.size
next
exit
@events.index(@event)
@events
pry
event_pos
next
@events
continue
exit
@events.object.at(@event)
@events.object.in(@event)
@events.object.index(@event)
@events.object
@event
pry
@events.object.index(@event)
@events.object
@event.object
@event.objects
event_pos
next
exit
@events
e.can_participate?
e = Event.last.decorate
exit
e.max_participants > e.participants_size
e.max_participants < e.participants_size
e.status == 'Abierto'
e.can_participate?
e = Event.last.decorate
exit
e.status
e.can_participate?
e = Event.last.decorate
e = Event.last
exit
EventStatus.all
e.save
e.time = "15:45"
e = Event.find(3)
e.save
e.time = "20:49"
e = Event.find(2)
e.save
e.time = "23:31"
e = Event.find(1)
Address.last
show-model Address
curl
-d 'format=json' \\
curl "http://soundcloud.com/oembed" \\
525*0.56
100 * 9/16
100 * 16 / 9
16/9
d = I18n.t('date.abbr_month_names')[Date.today.month].camelize
d = I18n.t('date.abbr_month_names')[Date.today.month].upcase
d = I18n.t('date.abbr_month_names')[Date.today.month].upper
d = I18n.t('date.abbr_month_names')[Date.today.month].uppercase
d = I18n.t('date.abbr_month_names')[Date.today.month]
d = I18n.t('date.abbr_month_names')
d = I18n.t('date.abbr_monthnames')
d = I18n.t(Date.today.month)
d = I18n.l(Date.today.month)
d.month
d
d = I18n.l(Date.today)
e.date
e = Event.last
d.strftime(:db)
I18n.translate(date: {abbr_month_names: 3})
I18n.translate(date: {:abbr_month_names, 3})
I18n.translate(:abbr_month_names, 3)
d.month.to_s(:abbr_month_names)
d.month.to_s(:month_name)
d.month.to_s
d.to_s()
d.to_s(:abbr_month_names)
d = Date.today
e.month_name
e = Event.last.decorate
exit
e.month_name
e = Event.last.decorate
exit
e.month_name
e.month
e = e.decorate
e = Event.last
exit
q
Date::
Date::MONTHNAMES[e.date.month]
Date::MONTHNAMES[Date.today.month]
t("date-month": e.date.month)
e.date.month
e.date.month_ago
e.date.month_field_tag
e.date.months
e.date.month_field
e.date.month.to_s(:short)
e.date.month
e.date.to_s(:short)
e.date.to_s(:long)
e.date.to_s(:default)
translate("date",e.date)
t("date",e.date)
e.date
e.date.strftime(:default)
e.date.format(:default)
e.date(:default)
e.date
e = Event.last
exit
e
e.save
e.name = "Prueba 3"
e = Event.find(3)
Event.find(3)
Event.find(1)
Event.find(2)
Event.find(2).creator
Event.find(2).event_participants
Event.find(1).event_participants
Event.find(2).event_participants
Event.find(2).images
Event.find(1).images
Event.find(4).images
Event.find(3).images
Event.find(3).images.any?
Event.find(2).images.any?
Event.find(1).images.any?
end
  puts i
  puts "Primero" if i.first?
1.upto(10) do |i|
exit
continue
@user
@pry
e = Event.region("Madrid")
e = Event.region("Comunidad de Madrid")
exit
e = Event.region("Comunidad de Madrid")
exit
e = Event.region("Comunidad de Madrid")
exit
e = Event.region("Comunidad de Madrid")
exit
e = Event.region("Comunidad de Madrid")
exit
e = Event.city("Madrid")
exit
e = Event.city("Madrid")
Address.last
e = Event.city("")
e = Event.city("Madrid")
exit
Event.joins(:address)
Event.addresses
Event.address
Event.joins(:addresses)
e = Event.city("Madrid")
Event.all
Event.joins(:addresses)
e = Event.city(" OR 1=1")
q
e = Event.city(" OR 1=1)
e = Event.city("")
e = Event.city()
e = Event.city("Madrid")
exit
e = Event.city("Madrid")
exit
Event.next(3)
Event.next(3).decorate
Event.next(3)
u.events_in_show(3)
u = User.find(7).decorate
exit
u.events_in_show(3)
u = User.find(7).decorate
exit
u.events_in_show(3)
u = User.find(7).decorate
exit
u.events_in_show(3)
u = u.decorate
u = User.find(7)
exit
u.profile.events
u.profile.events.includes(:musicians)
u.profile.events
u.profile.events.includes(:member)
u.profile.events.includes(:members, :bands)
u.profile.events.includes(:members. :bands)
u.profile.events.includes(:members)
u.profile.events
u.profile.events.includes(:bands)
u.profile.events.includes(member: :band)
u.profile.events.includes(members: :bands)
u = User.find(7)
clean
cls
clear
es = u.profileable.events
es = u.profileable.events.includes(:user)
es = u.profileable.events.includes(:musician)
es = u.profileable.events.includes(:bands)
es = u.profileable.events.includes(:band)
es.first.event_participants
es = u.profileable.events.includes(:event_participants)
e.first.participants
es = u.profileable.events.includes(:participants)
e = u.profileable.events
u.profileable.events.participants
u.profileable.events
u.profileable.events.includes(:participants)
u.profileable.events.includes(:participants).participant
u.profileable.events.includes(:participants).participant.id
u.profileable.events.includes(:participants)
e.participants
e = Event.find(3)
e1.participants
