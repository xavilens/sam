c
exit
c
@search
pry
@search
c
exit
@search.errors
pry
pry @search.errors.
@search.errors.full_messages
@search.error
@search.errors?
@search.errors
@search.location_type
@search
c
@search
n
c
@search
n
search_params
params
c
params
search_params
c
search_params
params
c
exit
c
params
User.order(:name)
User.all
Event.all
AddParticipantConversation.all
Conversation.last
Conversation.all
ConversationRelated.all
EventParticipant.last.destroy
EventParticipant.last
EventParticipant.last.destroy
EventParticipant.last
EventParticipant.last.destroy
EventParticipant.last
c = Conversation.last.messages
c = Conversation.last
ConversationRelated.all
cr.conversation
cr = ConversationRelated.last
cr.conversation
cr = ConversationRelated.first
ConversationRelated.all
Conversation.all
Conversation.destroy_all
Conversation.all
event_participant.event.conversations.add_participant.between(7, 9)
event_participant.event.conversations.add_participant.between(9, 7)
event_participant.event.conversations.add_participant.between(7, 9)
event_participant.event.conversations.add_participant
event_participant = EventParticipant.last
exit
event_participant.event.conversations.add_participant
event_participant = EventParticipant.last
exit
Conversation.find(22).add_participant
Conversation.find(9).add_participant
Conversation.add_participant
event_participant.event.conversations.add_participant
all
event_participant.event.conversations.
event_participant.event.conversations.add_participant.between(current_user, participant)
event_participant = EventParticipant.last
exit
ConversationRelated.all
e = EventParticipant.create(event: Event.find(3), participant: User.find(7))
ConversationRelated.all
e = EventParticipant.create(event: Event.find(3), participant: User.find(7))
c.event_related << Event.find(2)
c.extend
c.super
c
c = Conversation.last
e = EventParticipant.create(event: Event.find(3), participant: User.find(7))
exit
e = EventParticipant.create(event: Event.find(3), participant: User.find(7))
c
EventParticipant.all
e = EventParticipant.create(event: Event.find(3), participant: User.find(7))
EventParticipant.all
e = EventParticipant.create(event: Event.find(3), participant: User.find(7))
e = EventParticipant(event: Event.find(3), participant: User.find(7))
es.uniq
es
es = u.events
u.events
u = User.find 7
ConversationRelated.first.destroy
ConversationRelated.all
e.conversations.between(7, 9)
e.conversations
e = c.event
c = Conversation.last
exit
c = Conversation.last
exit
e.conversations
e
e = c.event
c = Conversation.last
exit
e.conversation
e.conversation_relateds
e.conversations
e
e = c.event
c = Conversation.last
exit
e = c.event_related
c = Conversation.last
exit
e = c.event_related
c = Conversation.last
exit
e = c.event
e = c.conversation_related.conversationable
c.event
c = Conversation.last
exit
cr = ConversationRelated.last
cr
c.event
c.events
c.conversation_related
c.event
c = Conversation.last
exit
c.event
cr.save
cr = ConversationRelated.new(conversation: Conversation.last, conversationable: Event.last)
RemoveParticipantConversation.all
c.save
c.type = Conversation.types[2]
Conversation.types
c.event
c = Conversation.last
exit
c.event
c = Conversation.last
exit
c.event_relateds
c.related
c = Conversation.last
exit
c.related
c = Conversation.last
exit
c.related
c = Conversation.last
exit
a = EventParticipant.create(event_id: 3, participant_id: 7)
a = EventParticipant.create(event_id: 3, participant_id: 6)
a = EventParticipant.create(event_id: 3, participant_id: 7)
a.errors.full_messages
a.errors
a = EventParticipant.create(event_id: 3, participant_id: 6)
exit
a.errors
a.save
a = EventParticipant.new(event_id: 3, participant_id: 6)
a.errors
a = EventParticipant.create(event_id: 3, participant_id: 6)
EventParticipant.create(event_id: 3, participant_id: 6)
exit
EventParticipant.create(event_id: 3, participant_id: 6)
exit
EventParticipant.create(event_id: 3, participant_id: 6)
exit
EventParticipant.create(event_id: 3, participant_id: 6)
exit
EventParticipant.create(event_id: 3, participant_id: 6)
exit
EventParticipant.create(event_id: 3, participant_id: 6)
EventParticipant.create(event_id: 3, participant_id: 7)
Participant.create(event_id: 3, participant_id: 7)
show-model EventParticipant
Message.types
exit
Message.types
exit
Message.types
AddParticipantMessage.all
Message.where("type is not null")
Message.all
exit
EventParticipant.last.event.name
EventParticipant.last
EventParticipant.last.destroy
EventParticipant.last
EventParticipant.last.destroy
EventParticipant.last
EventParticipant.last.destroy
EventParticipant.last
EventParticipant.last.destroy
EventParticipant.last
show-model EventParticipant
Message.last
exit
Message.last
c.event
c = AddParticipantConversation.new(user_1_id: 7, user_2_id: 9, event: Event.find(1))
exit
show-model Address
exit
params
show-model Event
Time.at("23:30")
Time.now.at("23:30")
Time.new("23:30")
Event.all
e.update(event_status_id: 1)
e = Event.last
e.update(event_status_id: 1)
e = Event.first
Event.first
Event.all
EventJobs.close_passed_events
exit
EventJobs.close_passed_events
exit
EventJobs.close_passed_events
EventJobs.connect
EventJobs
exit
EventJobs.close_passed_events
EventJobs
exit
passed_events = Event.where(event_status: opened).where("date <= ?", yesterday)
yesterday = Date.yesterday
opened = EventStatus.find_by_name('Abierto')
e
e.update(event_status: cerrado)
cerrado = EventStatus.find_by_name('Cerrado')
e = Event.find 1
Event.where(event_status_id: EventStatus.find_by_name('Abierto').id).where("date <= ?", Date.yesterday)
s = EventStatus.find_by_name('Abierto')
s = EventStatus.find(name: 'Abierto')
s = EventStatus.find(name:'Abierto')
Event.where(event_status_id: EventStatus.find(name:'Abierto')).where("date <= ?", Date.yesterday)
Event.where(event_status_id: EventStatus.find(name:'Abierto').id).where("date <= ?", Date.yesterday)
EventStatus.all
Event.where(event_status_id: EventStatus.find(name:'activo').id).where("date <= ?", Date.yesterday)
Event.where(event_status_id: EventStatus.find(name:'Activo').id).where("date <= ?", Date.yesterday)
