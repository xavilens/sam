exit
c
cc
c
date
c
@calendar.calendar
c
@calendar.calendar
c
@calendar.calendar
c
exception
n
c
exit
c[:"1"]
c[:"1·]
c[:1]
c = {"1": 1}
c = {a: 1}
c = {1: 1}
c[:1] = 1
c = {}
events.each do { |event| @calendar[event.year][event.month][event.day] << event  }
events.each do |e|
c
n
c
n
events.first.date.year
events.first.date.year.to_s.to_sym
events.first.date.year.to_sym
events.first.date.year
events.first.date.month
events.first.date
event.date
events
continue
n
c
@is_user_calendar
c
    def event_update_params
continue
n
@is_user_gallery
continue
exit
params[:user_id].present?continue
params[:user_id].present?
params[:user_id].exist?
params[:user_id].exists
params[:user_id].blank?
params[:user_id].exist?
params[:user_id].exists?
a = b.exists?
exit
User.where(profileable: b)
User
User.find(profileable_type: b.class.to_s)
User.find(profileable: b)
b.user
b = Band.last
Conversation.all
c.messages.first.class
c.messages.first
c.type
c.class
c.klass
c = Conversation.last
Conversation.last
exit
ep = EventParticipant.create(event_id: 2, participant_id: 9)
e = Event.find(2)
a.delete_if{ |n| n == 4}
a.delete{ |n| n == 4}
a.delete_by{ |n| n == 4}
a.delete { |n| n == 4}
a = [1,2,3,4,5]
m.save
m.body = "Bowie desea participar al evento 'Prueba 3'.<br><br>Si deseas que participe en el evento pulsa en el siguiente botón:<br><br><form action='/participants/new' data-remote='true' method='get'><input name='authenticity_token' value='<%= form_authenticity_token %>' type='hidden'><input name='event_id' value='3' type='hidden' /><input name='participant_id' value='7' type='hidden' /><input type='submit' value='Añadir a Bowie' /></form>"
m = Message.last
Conversation.add_participant_conversation(7, 9)
Conversation.add_participant_conversation(9, 7)
exit
m.save
m.body = "Bowie desea participar al evento 'Prueba 3'.<br><br>Si deseas que participe en el evento pulsa en el siguiente botón:<br><br><form action='/participants/new' data-remote='true' method='get'><input name='authenticity_token' value='<%= form_authenticity_token %>' type='hidden'><input name='event_participant[event_id]' value='3' type='hidden' /><input name='event_participant[participant_id]' value='7' type='hidden' /><input type='submit' value='Añadir a Bowie' /></form>"
m.body
m = Message.last
Conversation.participants_unread_count(9)
Conversation.participants_unread_count(7)
exit
Conversation.participants_unread_count(7)
exit
Conversation.participants_unread_count(7)
exit
Conversation.participants_unread_count(7)
exit
Message.last
Role.first.name.downcase
Role.all
u.role.name
u = User.last
e.save
e.event_status_id = 1
e = Event.find(2)
exit
@events.index(@event)
@events
exit
@events.object.at(@event)
@events.object.in(@event)
@events.object.index(@event)
@events.object
@event
exit
@events
e.can_participate?
e = Event.last.decorate
exit
e.max_participants > e.participants_size
e.max_participants < e.participants_size
e.status == 'Abierto'
e.can_participate?
e = Event.last.decorate
exit
e.status
e.can_participate?
e = Event.last.decorate
e = Event.last
exit
EventStatus.all
e.save
e.time = "15:45"
e = Event.find(3)
e.save
e.time = "20:49"
e = Event.find(2)
e.save
e.time = "23:31"
e = Event.find(1)
Address.last
show-model Address
curl
-d 'format=json' \\
curl "http://soundcloud.com/oembed" \\
525*0.56
100 * 9/16
100 * 16 / 9
16/9
d = I18n.t('date.abbr_month_names')[Date.today.month].camelize
d = I18n.t('date.abbr_month_names')[Date.today.month].upcase
d = I18n.t('date.abbr_month_names')[Date.today.month].upper
d = I18n.t('date.abbr_month_names')[Date.today.month].uppercase
d = I18n.t('date.abbr_month_names')[Date.today.month]
d = I18n.t('date.abbr_month_names')
d = I18n.t('date.abbr_monthnames')
d = I18n.t(Date.today.month)
d = I18n.l(Date.today.month)
d.month
d
d = I18n.l(Date.today)
e.date
e = Event.last
d.strftime(:db)
I18n.translate(date: {abbr_month_names: 3})
I18n.translate(date: {:abbr_month_names, 3})
I18n.translate(:abbr_month_names, 3)
d.month.to_s(:abbr_month_names)
d.month.to_s(:month_name)
d.month.to_s
d.to_s()
d.to_s(:abbr_month_names)
d = Date.today
e.month_name
e = Event.last.decorate
exit
e.month_name
e = Event.last.decorate
exit
e.month_name
e.month
e = e.decorate
e = Event.last
exit
q
Date::
Date::MONTHNAMES[e.date.month]
Date::MONTHNAMES[Date.today.month]
t("date-month": e.date.month)
e.date.month
e.date.month_ago
e.date.month_field_tag
e.date.months
e.date.month_field
e.date.month.to_s(:short)
e.date.month
e.date.to_s(:short)
e.date.to_s(:long)
e.date.to_s(:default)
translate("date",e.date)
t("date",e.date)
e.date
e.date.strftime(:default)
e.date.format(:default)
e.date(:default)
e.date
e = Event.last
exit
e
e.save
e.name = "Prueba 3"
e = Event.find(3)
Event.find(3)
Event.find(1)
Event.find(2)
Event.find(2).creator
Event.find(2).event_participants
Event.find(1).event_participants
Event.find(2).event_participants
Event.find(2).images
Event.find(1).images
Event.find(4).images
Event.find(3).images
Event.find(3).images.any?
Event.find(2).images.any?
Event.find(1).images.any?
end
  puts i
  puts "Primero" if i.first?
1.upto(10) do |i|
exit
continue
@user
@pry
e = Event.region("Madrid")
e = Event.region("Comunidad de Madrid")
exit
e = Event.region("Comunidad de Madrid")
exit
e = Event.region("Comunidad de Madrid")
exit
e = Event.region("Comunidad de Madrid")
exit
e = Event.region("Comunidad de Madrid")
exit
e = Event.city("Madrid")
exit
e = Event.city("Madrid")
Address.last
e = Event.city("")
e = Event.city("Madrid")
exit
Event.joins(:address)
Event.addresses
