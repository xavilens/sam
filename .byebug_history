c
cc
c
empty
n
empty
n
empty
n
c
n
location_type == 'city' && city.present?
city.present?
location_type
c
location_tupe
city
c
event_search_params
event_search_params['start_date(3i)']
date
n
c
event_search_params
n
c
event_search_paramsc
event_search_params
c
event_search_paramsc
params[:date]
n
c
x
c
@search
n
@search
c
set_calendar
n
@search
n
@search
c
exit
@search_form.events Event
pry
@search_form.events Event
c
@search_form.search Event
c
@search_form.search Event
c
exit
@search_form.search Event
Event.where(name: 'Prueba').join(' OR ')
Event.where(name: 'Prueba')
c
a.
a = []
a = 'aaa'
a=aa
type.to_set
type.to_h
type.to_formatted_s
type.to_a
type.to_ary
a.to_i
a.to_r
a.to_d
a = "2"
"2".to_number
"2".to_n
type
type.to_enum
type
type.delete("")
type = ["2", "1", ""]
q.empty?
q =  EventSearchForm.new(par)
par.merge({caca: 'a'})
par = {name: "AA2", type: 1, status: 1 }
q =  EventSearchForm.new({caca: 'a'})
show-model EventSearchForm
exit
q =  EventSearchForm.new({caca: 'a'})
q =  EventSearchForm.new
show-model EventSearchForm
show.model EventSearchForm
EventSearchForm
exit
EventSearchForm
reload!
EventSearchForm
exit
EventSearchForm.attribute_method? :culo
EventSearchForm.attribute_method? :caca
EventSearchForm.attribute_method? :name
EventSearchForm.attribute_method? :"caca="
EventSearchForm.attribute_method? "caca="
EventSearchForm.attribute_method? "caca"
EventSearchForm.attribute_method? :caca
EventSearchForm.attribute_method? 
EventSearchForm.attr_internal_reader
EventSearchForm.attr_internal :caca
EventSearchForm.attr_internal
EventSearchForm.attributte_names
EventSearchForm.attributtes_names
EventSearchForm
q =  EventSearchForm.new({caca: 'a'})
q.empty?
q =  EventSearchForm.new(par)
par = {name: "AA2", type: 1, status: 1 }
q.empty?
q =  EventSearchForm.new
show-model EventSearchForm
exit
q.empty?
q =  EventSearchForm.new
show-model EventSearchForm
EventSearchForm
q =  EventSearchForm.new
exit
q =  EventSearchForm.new(par)
par = {name: "AA2", type: 1, status: 1 }
q =  EventSearchForm.new
q =  EventSearchForm.new({})
show-model EventSearchForm
EventSearchForm
show-models
show-middleware
help
dir
cd ..
q = EventSearchForm.new
exit
show-model Event
Event.attribute_names.include? "type"
Event.attribute_names.include? :pvp.to_s
Event.attribute_names.include? "pvp"
Event.attribute_names.include? :pvp
Event.attribute_names.include? :caca
Event.attribute_names
Event.attribute_aliases? :caca
Event.attribute_aliases?
show-model Event
exit
show-model Event
exit
show-model Event
Event.attribute_method? :caca
Event.attribute_method? :status
Event.attribute_method? :type
Event.attribute_method? :name
Event.attribute_method?
a = EventSearchForm.new
exit
Address.where{addresseable_type.eq('Event')}
exit
Address.where{addresseable_type === 'Event'}
Address.where{addresseable_type:'Event'}
Address.where{addresseable_type == 'Event'}
Address.where{addresseable_type == 'Event' || addresseable_type == 'User'}
Address.where{addresseable_type == 'Event'}
Address.where(addressable_type: 'Event').where("or addresseable_type = ?", 'User')
exit
asdasdasd
c
q
Address.where(addressable_type: 'Event').where('or addresseable_type = ?", 'User')
Address.where(addressable_type: 'Event')
User.bands
User.band
[[[[
Address.where(addresseable_type: 'Event').group([[[[[:region)
Address.select(:city).where(addresseable_type: 'Event').group(:region)
Address.select(:city).where(addresseable_type: 'Event').group(:city)
Address.select(:city).where(addresseable_type: 'User').group(:city)
Address.select(:city).where(addresseable_type: 'Event').group(:city)
Address.where(addresseable_type: 'Event').group(:city)
Address.where(addresseable_type: 'Event')
Address.all
d + 1.month
d - 1.month
d = Date.parse('01/04/2017')
d + 1.month
d + 1
d = Date.today
Event.joins(:event_status).where(event_statuses: { name: ['Abierto','Cerrado'] })
Event.joins(:event_status).where(event_statuses: { name: 'Abierto' })
Event.joins(:event_status).where(event_statuses: { id: 1})
Event.joins(:event_status).where()
Event.joins(:event_status)
EventStatus.all
Event.joins(:event_status).where(event_statuses: { name: 'Concierto' })
Event.joins(:event_status).where(event_status: { name: 'Concierto' })
Event.joins(:event_status).where(event_status: {})
Event.joins(:event_status)
Event.joins(:event_status).where(event_statuses: {name: ['Acustico']})
Event.joins(:event_status).where(event_statuses: {name: ['Festival']})
Event.joins(:event_status).where(event_statuses: {name: ['Conciertos']})
Event.joins(:event_status).where(event_statuses: {name: ['Concierto']})
Event.joins(:event_status).where(name: ['Concierto'])
Event.joins(:event_status).where(name: [''])
Event.joins(:event_status).where(name: [])
Event.joins(:event_status).where()
Event.joins(:event_status)
Event.joins(:event_statuses)
User.where(profileable_type: ['Band', 'Musician'])
User.where(profileable_type: 'Band').where(profileable_type: 'Musician')
User.where(profileable_type: 'Band')
User.where(profileableType: 'Band')
a = e.address
e = Event.last
d.to_s(:long)
d = Date.today
c = EventCalendar.new(d, d2, User.find(7))
d2 = Date.today - 20
d = Date.today - 30
u.created_events.decorate
EventDecorator.decorate_collection(u.events)
u.events
u.events.to_h
u = User.find(7)
exit
u.events.decorate_all
u.events.to_
u.events.to_h
u.events.to_a
u.events
u = User.find(7)
c = EventCalendar.new(d, d2, User.find(7))
d2 = Date.today - 20
d = Date.today - 30
exit
c = EventCalendar.new(d, d2, User.find(7))
c.calendar
c = EventCalendar.new(d, d2)
d2 = Date.today - 20
d = Date.today - 30
d.england
d.end_of_week
d.end_of_quarter
d.end_of_month
d = Date.new(d.year, d.month)
d = Date.today
Date.today.month
d.start
d = Date.today
u.events
u = User.find(7)
exit
u.events
reload!
u.events
