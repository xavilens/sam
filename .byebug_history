c
n
video_info
n
c
@video.errors.any?
@video
@video.has_errors?
@video.errors.messages
@video.errors.message
@video.errors
@video.errors.first
@video.errors.each { |error| puts error.message }
@video.errors
@videos.errors
error
c
@video.errors.first[1]
@video.errors
@video.erros
v = Video.new(video_params)
video_params
n
c
exit
params
video_params
v.api_data
v = Video.new(url: 'https://vimeo.com/53864769', api_data: true)
v = Video.new(ur: 'https://vimeo.com/53864769', api_data: true)
exit
q
VideoInfo.
v = VideoInfo.new('https://www.google.es/search?client=ubuntu&channel=fs&q=rails+how+to+execute+js+function&ie=utf-8&oe=utf-8&gfe_rd=cr&ei=paHzWJCtGOWJ8QfjhrFI#channel=fs&q=rails+javascript+disabled+links+when+input+check')
v.embed_code
v.embed_url
Time.at(d).utc.strftime('%H:%M:%S')
Time.at(d)
d = v.duration
v = VideoInfo.new('https://vimeo.com/61354749')
show-model Video
v.duration
v.title
v = VideoInfo.new('https://vimeo.com/61199700')
v.duration
v.embed_code
v.video_id
v.title
v
v = VideoInfo.new("https://vimeo.com/61199700")
t = Time.at(201)
t = (Time.now + 201) - Time.now
t = Time.now + 201
t.hour
t.utc
t = Time.at(201)
Time.at(201).utc.strftime("%M:%S")
Time.at(201).utc.strftime("%H:%M:%S")
Time.at(201).strftime("%H:%M:%S")
Time.at(201)
201.seconds
201.second
201.minute
201.minutes
Time.parse('201')
Time.parse(201)
Time.new(201)
a.downcase
a.lowercase
a.lowcase
a = "aASsDa"
show-model Video
exit
u.profile_page_videos
u = User.find 7
exit
sc.get('/oembed', url: 'https://soundcloud.com/xisco-iglesias/russian-subway-dogs-12212012')
sc.get('/oembed', url: 'http://soundcloud.com/forss/flickermood')
get('/oembed', url: 'https://soundcloud.com/xisco-iglesias/russian-subway-dogs-12212012')
sc.display
sc.refresh_token
sc.access_token
get('/oembed', url: 'http://soundcloud.com/forss/flickermood')
sc.
sc = SoundCloud.new client_id: 'xisco-iglesias'
SoundCloud.new client_id: 'xisco-iglesias'
SoundCloud.new
ASDas
SoundCloud
"a".html_safe
v.title
v = VideoInfo.new("https://www.youtube.com/watch/?v=Tgcc5V9Hu3g")
v.title
exit
v.title
v = VideoInfo.new("https://www.youtube.com/watch/?v=Tgcc5V9Hu3g")
v.title
v = VideoInfo.new("https://www.youtube.com/watch/?v=Tgcc5V9Hu3g")
v.title
v.description
v.data
v
v.duration
v
v.provider
v = VideoInfo.new("https://www.youtube.com/watch/?v=Tgcc5V9Hu3g")
VideoInfo.provider_api_keys
exit
v.title
v = VideoInfo.new("https://www.youtube.com/watch/?v=Tgcc5V9Hu3g")
VideoInfo
exit
ENV["VIMEO_API_KEY"]
v.embed_code
v.thumbnail
v.title
v = VideoInfo.new("http://vimeo.com/898029")
thumbnail
v.
v.embed_code
v = VideoInfo.new("https://www.youtube.com/watch/?v=Tgcc5V9Hu3g")
v = VideoInfo.new("https://www.youtube.com/watch/Tgcc5V9Hu3g")
exit
ENV["YOUTUBE_API_KEY"]
ENV
exit
ENV
ENV['YOUTUBE_API_KEY']
exit
end
  track_id = $5
if  url[/^.*((v\/)|(embed\/)|(watch\?))\??v?=?([^\&\?]*).*/]
url = "https://www.youtube.com/watch?v=Tgcc5V9Hu3g"
end
  track_id = $5
if  url[/^.*((v\/)|(embed\/)|(watch\?))\??v?=?([^\&\?]*).*/]
url = "https://www.youtube.com/?v=Tgcc5V9Hu3g"
end
  track_id = $1
if url[/youtu\.be\/([^\?]*)/]
url = "youtu.be/1s123123"
end
  track_id = $5
if  url[/^.*((v\/)|(embed\/)|(watch\?))\??v?=?([^\&\?]*).*/]
url = "https://www.youtube.com/?v=Tgcc5V9Hu3g"
end
  $1
if url[/youtu\.be\/([^\?]*)/]
url = "youtu.be/?1s123123"
end
  track_id = $1
if url[/youtu\.be\/([^\?]*)/]
$0
$1
a[/youtu\.be\/([^\?]*)/]
a = "youtu.be/?asda"
a[/a/]
a[/youtu\.be\/([^\?]*)/]
a = "a1234A"
"a1234A"
u.song_ids
u.songs_ids
u.songs?
u.songs
u = User.last
exit
u.songs
u = User.last
a
a.is_a? a
a.is_a?
a = []
a: []
:a => []
exit
@search_form.events Event
d.beginning_of_month
d.day
d.day = 1
d.end_of_month
d.start
d = Date.parse("11/02/2017")
exit
@search_form.search Event
Event.where(name: 'Prueba').join(' OR ')
Event.where(name: 'Prueba')
c
a.
a = []
a = 'aaa'
a=aa
type.to_set
type.to_h
type.to_formatted_s
type.to_a
type.to_ary
a.to_i
a.to_r
a.to_d
a = "2"
"2".to_number
"2".to_n
type
type.to_enum
type
type.delete("")
type = ["2", "1", ""]
q.empty?
q =  EventSearchForm.new(par)
par.merge({caca: 'a'})
par = {name: "AA2", type: 1, status: 1 }
q =  EventSearchForm.new({caca: 'a'})
show-model EventSearchForm
exit
q =  EventSearchForm.new({caca: 'a'})
q =  EventSearchForm.new
show-model EventSearchForm
show.model EventSearchForm
EventSearchForm
exit
EventSearchForm
reload!
EventSearchForm
exit
EventSearchForm.attribute_method? :culo
EventSearchForm.attribute_method? :caca
EventSearchForm.attribute_method? :name
EventSearchForm.attribute_method? :"caca="
EventSearchForm.attribute_method? "caca="
EventSearchForm.attribute_method? "caca"
EventSearchForm.attribute_method? :caca
EventSearchForm.attribute_method? 
EventSearchForm.attr_internal_reader
EventSearchForm.attr_internal :caca
EventSearchForm.attr_internal
EventSearchForm.attributte_names
EventSearchForm.attributtes_names
EventSearchForm
q =  EventSearchForm.new({caca: 'a'})
q.empty?
q =  EventSearchForm.new(par)
par = {name: "AA2", type: 1, status: 1 }
q.empty?
q =  EventSearchForm.new
show-model EventSearchForm
exit
q.empty?
q =  EventSearchForm.new
show-model EventSearchForm
EventSearchForm
q =  EventSearchForm.new
exit
q =  EventSearchForm.new(par)
par = {name: "AA2", type: 1, status: 1 }
q =  EventSearchForm.new
q =  EventSearchForm.new({})
