exit
continue
next
e
next
e
next
params
next
exit
params
next
exit
continue
next
exit
next
continue
nextcontinue
next
u
next
u = current_user
next
current_user
exit
next
continue
exception
next
continue
c.save
c.valid?
c = AddMemberConversation.new(user_1_id: 7, user_2_id: 9)
continue
c.valid?
c = AddMemberConversation.new(user_1_id: 7, user_2_id: 9)
c.valid?
c = AddMemberConversation.new(user_1_id: 7, user_2_id: 9)
c.valid?
c = AddMemberConversation.new
conversation.save
conversation
next
continue
exception
next
continue
next
exception
next
continue
conversation.valid?
conversation.messages
conversation.class
conversation
conversation.
conversation.super.valid?
conversation.valid?
conversation
continue
self.messages << message
self.messages
message
continue
next
body
next
continue
exception
next
continue
next
exception
next
continue
exception
next
self
next
continue
exception
next
self
next
self
next
continue
exception
next
self
next
self.user_1
self
next
continue
self
continue
AddMemberMessage.new(author: self.user_1)
self
conversation
next
continue
conversation
self
next
continue
next
continue
next
exit
exception
next
send_membership_service
next
user
continue
rails c
continue
controller
continue
action
controller
continue
controller
continue
controller
continue
controller
continue
action
controller
action
continue
controller
continue
action
controller
continue
next
continue
next
continue
res
next
res
p_action
next
params
p_controller
next
continue
active_page('users','edit_knowlegdes')
params
active_page('users','edit_knowlegdes')
active_page('users','edit_knowlegde')
continue
next
mk_key
continue
next
continue
next
continue
mk_params[:musician_knowledges_attributes].each do |mk_k, mk_v| puts "#{mk_k}, #{mk_v}" end
mk_params[:musician_knowledges_attributes].each do |mk_k, mk_v|
mk_params[:musician_knowledges_attributes] do |mk_k, mk_v|
mk_params[:musician_knowledges_attributes]
mk_params
continue
mk_params.require(:musician_knowledges_attributes).each
mk_params.require(:musician_knowledges_attributes).each do |mk|
mk_params[:musician_knowledges_attributes].each do |mk|
mk_params[:musician_knowledges_attributes].each
mk_params[:musician_knowledges_attributes].size
mk_params[:musician_knowledges_attributes]
next
index
next
continue
next
continue
next
continue
musico
next
@user
continue
@musician
@user
musico
continue
musico.musician_knowledges
musico.update(update_musician_params)
musico = Musician.last
musico.musician_knowledges
musico.update(update_musician_params)
musico = Musician.first
Musician.all
musico.user
musico = Musician.last
update_musician_params
continue
next
continue
@musician.update(update_musician_params)
@musician.user
@musician
update_musician_params
params
continue
mk[1][:instrument_id]
mk
continue
next
continue
for mkp.each do |mk| puts "#{mk[:instrument_id]}, #{mk[:level_id]}" end
mkp.first
mkp.first[:instrument_id]
mkp[:instrument_id]
mkp = mk_params[:musician_knowledges_attributes]
mk_params = mkp[:musician_knowledges_attributes]
mk_params
next
continue
mk
mk_params
mk_params.delete mk
mk = mk_params['0']
mk_params
mk_params.delete '1'
mk_params['1'].delete
mk_params.class
mk_params
mk_params = mk_params['1'].delete
mk_params
mk_params = mk_params[mk].delete
mk_params = update_musician_params.require(:musician_knowledges_attributes)
mk_params
mk_params = mk_params.delete(mk)
mk_params
mk_params.delete mk
mk_params.delete :mk
mk_params['0'].delete
mk_params['0'].delte
mk_params.delete(mk)
mk = mk_params['0']
mÃ± = mk_params['0']
mk_params['0']
mk_params[0]
mk_params.get(0)
mk_params(0)
mk_params
mk_params[0]
mk_params.push(0)
mk_params.remove(0)
