c
n
c
@calendar.calendar
c
date
events
calendar[date]
date_events
exit
max = event.max_participants
event_participants.size >= event.max_participants
event_participants.size
event_participants
c
@calendar.events.pages
@calendar.events.page?
c
x
exit
@finish_date
@calendar.last_event_day
@calendar.fist_event_day
reload!
@calendar.fist_event_day
@calendar.fist_event_date
@calendar.first_event_day
@calendar.first_event_date
@start_date
@start_day
pry
c
exit
c
@calendar.events
pry
c
cc
c
cc
c
@calendar.events
@calendar.blank?
c
@events.page 3
@events.page 2
@events.page 1
@events.page
@events
@events.object.where(date: Date.today)
@events.where(date: Date.new(2017, 5, 25))
@events
c
model
c
n
exit
)
model.order(:date
model
pry
model
c
n
user
c
exception
n
c
model
c
exit
find_events user.member_events
search.events(user.member_events)
user.member_events
search.events(user.member_events)
search.events(user.created_events)
user.member_events
user.created_events
user
@user
@events
u.followers
u.leaders
reload!
u.leaders.order(followships: {id: :desc})
u = User.find 9
u.leaders.order('followships.id': :desc)
u.leaders.order(followships.id: :desc)
u.leaders.order(followships: :desc)
u.leaders.order(followships: {:desc})
u.leaders.order(followships: {id: :desc})
u.followships
u.followers.followships
u.followers
u = User.find 9
u
u.followships
u.followship
i.save
i.title = 'asdasdasd asd asda sda sdas d'
i.save
i.name = 'asdasdasd asd asda sda sdas d'
i = Image.find 9
sns.send('facebook')
sns.avaliables
sns = SocialNetworksSet.find 48
exit
sns.avaliables
sns = u.social_networks_set
u = User.find 9
reload!
u.social_networks
u.social_networks_set
u = User.find 9
u.social_networks_set
u.social_networks
u = User.find 7
exit
u.social_networks
u = User.find 7
show-model SocialNetworksSet
reload!
show-model SocialNetworksSet
exit
show-model SocialNetworksSet
reload!
show-model SocialNetworksSet
SocialNetworksSet
sns.avaliables
sns = SocialNetworksSet.find 41
sns = SocialNetworksSet.find 40
sns = SocialNetworksSet.find 39
sns = SocialNetworksSet.first
sns = SocialNetworksSet.find 6
sns = SocialNetworksSet.find 5
sns = SocialNetworksSet.find 4
sns = SocialNetworksSet.find 3
sns = SocialNetworksSet.find 2
sns = SocialNetworksSet.find 1
sns = SocialNetworkSet.find 1
exit
@calendar.events
c = Conversation.none
c = Conversation.search(9, '')
c = Conversation.find 11
User.page(2).decorate
User.page().decorate
User.page(1)
u.class.name.underscore
u.class.name.sn
u.class.name.snake
u.class.name
a
u.class.name+
u.class_eval
u.class
u.class_name
u = UserSearchForm.new
BandStatus.all
reload!
BandStatus.all
exit
users
exit
c
next
users
User.bands.genres(1..30)
reload!
User.bands.genres(1..30)
reload!
show-model Band
User.bands.genres(1..30)
reload!
User.bands
User.bands.genres(1..30)
reload!
User.bands.genres(1..30)
exit
User.bands.genres(1..30)
reload!
User.musicians.instruments(1..30)
reload!
User.musicians.instruments(1..30)
User.musicians.instruments(1..3)
User.musicians.instruments([1,2,3])
reload!
User.musicians.instruments([1,2,3])
User.musicians.joins("INNER JOIN musicians ON profileable_id = musicians.id").joins("INNER JOIN musician_knowledges ON musician_knowledges.musician_id = musicians.id").where("musician_knowledges.instrument_id in :instrument", instrument: [1,2,3])
User.musicians.joins("INNER JOIN musicians ON profileable_id = musicians.id").joins("INNER JOIN musician_knowledges ON musician_knowledges.musician_id = musicians.id").where("musician_knowledges.instrument_id in :instrument", [1,2,3])
User.musicians.joins("INNER JOIN musicians ON profileable_id = musicians.id").joins("INNER JOIN musician_knowledges ON musician_knowledges.musician_id = musicians.id")
q
User.musicians.joins("INNER JOIN musicians ON profileable_id = musicians.id").joins(INNER JOIN musician_knowledges ON musician_knowledges.musician_id = musicians.id")
User.musicians.joins("INNER JOIN musicians ON profileable_id = musicians.id")
User.musicians.includes(:profileable).includes(:musician_knlowdges)
User.musicians.includes(:profileable)
User.musicians.includes(:profileable).includes(:musician_knlowdges)
User.musicians.includes(:musicians)
User.musicians.includes(:musicians).includes(:musician_knlowdges)
User.musicians
Address.bands
Address.musicians
reload!
Address.musicians
reload!
Address.musicians
Address.users.joins("INNER JOIN users ON addresseable_id = users.id").where(users: {profileable_type: 'Musician'})
Address.users.joins("INNER JOIN users ON addresseable_id = users.id")
ax
das
qasdas
q
Address.users.joins("INNER JOIN users ON addresseable_id = users.id)
Address.users.joins(", users ON addresseable_id = users.id")
Address.users.joins(",'users' ON addresseable_id = users.id")
Address.users.joins("'users' ON addresseable_id = users.id")
Address.users.joins("users ON addresseable_id = users.id")
")
Address.users.joins("users ON addresseable_id = users.id)
Address.users.includes(:addresseable)
q
Address.users.includes(:addresseable).
Address.users.includes(:addresseable).where("users.profleable_type = 'Musician'")
Address.users.includes(:addresseable).where(users: {profileable_type: 'Musician'})
Address.users.includes(:addresseable).where(user: {profileable_type: 'Musician'})
Address.users.includes(:addresseable).where(users: {profileable_type: 'Musician'})
Address.users.includes(:addresseable)
Address.users.joins(:users).where("addresseable_id = users.user_id")
Address.users
Address.users.joins(:users).where("addresseable_id = users.user_id")
Address.users.joins(:user).where("addresseable_id = users.user_id")
Address.users.joins(:user).where("addresseable_id = user_id")
Address.users.joins(:users)
Address.users.joins(:addresseable)
Address.users
Address.joins(:addresseable)
Address.joins(:addresseables)
Address.joins(:users)
Address.joins(:addresseable)
Address.join(:addresseable)
Address.joins(:addresseable)
MusicianStatus.last.musicians
MusicianStatus.first.musicians
MusicianStatus.first
MusicianStatus.order(:name)
MusicianStatus.all.order(:name)
exit
MusicianStatus.all.order(:name)
exit
MusicianStatus.where("name <> 'Inactivo'").order(:name)
MusicianStatus.create(id: 5, name: "Inactivo")
MusicianStatus.all.order(:name)
MusicianStatus.all.order(:name).delete(MusicianStatus.find_by_name("Inactivo"))
MusicianStatus.all.order(:name) - MusicianStatus.find_by_name("Inactivo")
MusicianStatus.all.order(:name)
