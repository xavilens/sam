c
n
c
n
c
n
c
n
c
n
c
n
c
n
c
n
c
n
c
exit
@calendar.events
c = Conversation.none
c = Conversation.search(9, '')
c = Conversation.find 11
User.page(2).decorate
User.page().decorate
User.page(1)
u.class.name.underscore
u.class.name.sn
u.class.name.snake
u.class.name
a
u.class.name+
u.class_eval
u.class
u.class_name
u = UserSearchForm.new
BandStatus.all
reload!
BandStatus.all
exit
users
exit
c
next
users
User.bands.genres(1..30)
reload!
User.bands.genres(1..30)
reload!
show-model Band
User.bands.genres(1..30)
reload!
User.bands
User.bands.genres(1..30)
reload!
User.bands.genres(1..30)
exit
User.bands.genres(1..30)
reload!
User.musicians.instruments(1..30)
reload!
User.musicians.instruments(1..30)
User.musicians.instruments(1..3)
User.musicians.instruments([1,2,3])
reload!
User.musicians.instruments([1,2,3])
User.musicians.joins("INNER JOIN musicians ON profileable_id = musicians.id").joins("INNER JOIN musician_knowledges ON musician_knowledges.musician_id = musicians.id").where("musician_knowledges.instrument_id in :instrument", instrument: [1,2,3])
User.musicians.joins("INNER JOIN musicians ON profileable_id = musicians.id").joins("INNER JOIN musician_knowledges ON musician_knowledges.musician_id = musicians.id").where("musician_knowledges.instrument_id in :instrument", [1,2,3])
User.musicians.joins("INNER JOIN musicians ON profileable_id = musicians.id").joins("INNER JOIN musician_knowledges ON musician_knowledges.musician_id = musicians.id")
q
User.musicians.joins("INNER JOIN musicians ON profileable_id = musicians.id").joins(INNER JOIN musician_knowledges ON musician_knowledges.musician_id = musicians.id")
User.musicians.joins("INNER JOIN musicians ON profileable_id = musicians.id")
User.musicians.includes(:profileable).includes(:musician_knlowdges)
User.musicians.includes(:profileable)
User.musicians.includes(:profileable).includes(:musician_knlowdges)
User.musicians.includes(:musicians)
User.musicians.includes(:musicians).includes(:musician_knlowdges)
User.musicians
Address.bands
Address.musicians
reload!
Address.musicians
reload!
Address.musicians
Address.users.joins("INNER JOIN users ON addresseable_id = users.id").where(users: {profileable_type: 'Musician'})
Address.users.joins("INNER JOIN users ON addresseable_id = users.id")
ax
das
qasdas
q
Address.users.joins("INNER JOIN users ON addresseable_id = users.id)
Address.users.joins(", users ON addresseable_id = users.id")
Address.users.joins(",'users' ON addresseable_id = users.id")
Address.users.joins("'users' ON addresseable_id = users.id")
Address.users.joins("users ON addresseable_id = users.id")
")
Address.users.joins("users ON addresseable_id = users.id)
Address.users.includes(:addresseable)
q
Address.users.includes(:addresseable).
Address.users.includes(:addresseable).where("users.profleable_type = 'Musician'")
Address.users.includes(:addresseable).where(users: {profileable_type: 'Musician'})
Address.users.includes(:addresseable).where(user: {profileable_type: 'Musician'})
Address.users.includes(:addresseable).where(users: {profileable_type: 'Musician'})
Address.users.includes(:addresseable)
Address.users.joins(:users).where("addresseable_id = users.user_id")
Address.users
Address.users.joins(:users).where("addresseable_id = users.user_id")
Address.users.joins(:user).where("addresseable_id = users.user_id")
Address.users.joins(:user).where("addresseable_id = user_id")
Address.users.joins(:users)
Address.users.joins(:addresseable)
Address.users
Address.joins(:addresseable)
Address.joins(:addresseables)
Address.joins(:users)
Address.joins(:addresseable)
Address.join(:addresseable)
Address.joins(:addresseable)
MusicianStatus.last.musicians
MusicianStatus.first.musicians
MusicianStatus.first
MusicianStatus.order(:name)
MusicianStatus.all.order(:name)
exit
MusicianStatus.all.order(:name)
exit
MusicianStatus.where("name <> 'Inactivo'").order(:name)
MusicianStatus.create(id: 5, name: "Inactivo")
MusicianStatus.all.order(:name)
MusicianStatus.all.order(:name).delete(MusicianStatus.find_by_name("Inactivo"))
MusicianStatus.all.order(:name) - MusicianStatus.find_by_name("Inactivo")
MusicianStatus.all.order(:name)
MusicianStatus.all.order(:name).next
ea
MusicianStatus.all.order(:name).
MusicianStatus.all.order(:name)
exit
c
@search
exit
@search.errors
exit
c
params
User.order(:name)
User.all
Event.all
AddParticipantConversation.all
Conversation.last
Conversation.all
ConversationRelated.all
EventParticipant.last.destroy
EventParticipant.last
EventParticipant.last.destroy
EventParticipant.last
EventParticipant.last.destroy
EventParticipant.last
c = Conversation.last.messages
c = Conversation.last
ConversationRelated.all
cr.conversation
cr = ConversationRelated.last
cr.conversation
cr = ConversationRelated.first
ConversationRelated.all
Conversation.all
Conversation.destroy_all
Conversation.all
event_participant.event.conversations.add_participant.between(7, 9)
event_participant.event.conversations.add_participant.between(9, 7)
event_participant.event.conversations.add_participant.between(7, 9)
event_participant.event.conversations.add_participant
event_participant = EventParticipant.last
exit
event_participant.event.conversations.add_participant
event_participant = EventParticipant.last
exit
Conversation.find(22).add_participant
Conversation.find(9).add_participant
Conversation.add_participant
event_participant.event.conversations.add_participant
all
event_participant.event.conversations.
event_participant.event.conversations.add_participant.between(current_user, participant)
event_participant = EventParticipant.last
exit
ConversationRelated.all
e = EventParticipant.create(event: Event.find(3), participant: User.find(7))
ConversationRelated.all
e = EventParticipant.create(event: Event.find(3), participant: User.find(7))
c.event_related << Event.find(2)
c.extend
c.super
c
c = Conversation.last
e = EventParticipant.create(event: Event.find(3), participant: User.find(7))
exit
e = EventParticipant.create(event: Event.find(3), participant: User.find(7))
c
EventParticipant.all
e = EventParticipant.create(event: Event.find(3), participant: User.find(7))
EventParticipant.all
e = EventParticipant.create(event: Event.find(3), participant: User.find(7))
e = EventParticipant(event: Event.find(3), participant: User.find(7))
es.uniq
es
es = u.events
u.events
u = User.find 7
ConversationRelated.first.destroy
ConversationRelated.all
e.conversations.between(7, 9)
e.conversations
e = c.event
c = Conversation.last
exit
c = Conversation.last
exit
e.conversations
e
e = c.event
c = Conversation.last
exit
e.conversation
e.conversation_relateds
e.conversations
e
e = c.event
c = Conversation.last
exit
e = c.event_related
c = Conversation.last
exit
e = c.event_related
c = Conversation.last
exit
e = c.event
e = c.conversation_related.conversationable
c.event
c = Conversation.last
exit
cr = ConversationRelated.last
cr
c.event
c.events
c.conversation_related
c.event
c = Conversation.last
exit
c.event
cr.save
cr = ConversationRelated.new(conversation: Conversation.last, conversationable: Event.last)
RemoveParticipantConversation.all
c.save
